#!/usr/bin/env ruby

require 'rubygems'
require 'optitron'

if __FILE__ =~ /bin\/neph$/
  $: << File.expand_path(File.dirname(__FILE__) + '/../lib')
  require 'nephele'
else
  require 'nephele'
end
# awesome_print doesn't seem to play nice with optitron?
#require 'ap'

class Nephele::Runner < Optitron::CLI
  JODELL_CHEF_BOOTSTRAPPER = 'https://github.com/jodell/cookbooks/raw/master/bin/bootstrap.sh'
  class_opt 'cookbooks',           'optional cookbooks URI', :type => :string
  class_opt 'personality',         'comma-separated tuple of contents,targetfile to be placed at startup', :type => :string
  class_opt 'bootstrap',           "optional bootstrapper URI, defaults to #{JODELL_CHEF_BOOTSTRAPPER}", :type => :string
  class_opt 'recipe',              'run this recipe after bootstrapping', :type => :string
  class_opt 'vpn-credential-file', 'specify a vpnpass file to seed the target vm', :type => :string
  class_opt 'prestrap',            'Executes a command or the contents of a file on a VM prior to bootstrapping', :type => :string

  desc 'Display a list of servers'
  def list
    puts service.servers.map { |i| i[:name] }
  end

  desc 'Display available images'
  def images
    puts service.images.map { |i| i[:name] }
  end

  desc 'List available flavors'
  def flavors
    puts service.flavors.map { |i| i[:name] }
  end

  desc 'Display server status'
  def status
    puts service.status
  end

  desc "Creates a node with name, image name, flavor"
  opt 'count', 'create foo, foo2, foo3, ...', :type => :numeric
  def create(name, image, flavor)
    personality = Nephele::Rackspace::Util.personality(params['personality'] || :default)
    if vpnfile = params['vpn-credential-file'] && !vpnfile.empty?
      personality.delete_if { |k, v| v == '/root/.vpnpass' }
      personality[vpnfile] = '/root/.vpnpass'
    end
    (params['count'] || 1).to_i.times do |i|
      @node = service.create \
        :name        => name + "#{params['count'] ? i + 1 : ''}",
        :image       => Nephele::Rackspace.image_lookup(image),
        :flavor      => flavor,
        :personality => personality
    end
    sleep 5
  end

  desc 'Save an image of the node'
  def save(nodename, savename)
    service.server_objs.find { |s| s.name == nodename }.create_image savename
  end

  desc 'Destroy a given node'
  def destroy(name_string)
    if node = service.server_objs.find { |s| s.name == name_string }
      puts "Destroying: #{name_string}"
      node.delete!
    end
  end

  desc 'Change a password on given node'
  def password(node_string, password_string)
    service.server_objs.find { |s| s.name == node_string }.update(:adminPass => password_string)
  end

  desc 'Delete an image'
  def delete(image)
    service.delete_image image
  end

  ##
  # neph bootstrap ramsay lucid '512 server' -P "export CHEF_LOG_LEVEL=debug; export CHEF_LOG_LOCATION='chef.log'"
  #
  desc 'Create a VM and run a chef bootstrapper, optional recipe, bootstrap, cookbooks args'
  def bootstrap(name, image, flavor)
    puts "Bootstrapping: #{name}..."
    create name, image, flavor
    bootstrap = params['bootstrap'] || JODELL_CHEF_BOOTSTRAPPER
    node_run "curl #{bootstrap} > boot && chmod +x boot && ./boot #{params['cookbooks'] || ''}"
    # This is inaccurate. Prestrapping is just for changing chef-solo's verbosity.
    #
    recipe_cmd = [
      "#{params['prestrap'] ? prestrap_cmd + ' && ' : ''}",
      "cd -P /var/chef/cookbooks && (bundle check || bundle install) && rake update && rake run[#{params['recipe']}]"
    ].join
    node_run recipe_cmd if params['recipe']
  end

  def node_run(cmd)
    puts "Running #{cmd}" if ENV['verbose']
    system %-time ssh root@#{@node.addresses[:public]} "#{cmd}"-
  end

  def prestrap_cmd
    File.exists?(params['prestrap']) ? File.read(params['prestrap']) : params['prestrap']
  end

  desc 'Destroy and bootstrap'
  def restrap(name, image, flavor)
    destroy name
    bootstrap name, image, flavor
  end

  desc 'Boostrap a VM and save an image of it'
  def archive(name, image, flavor, savename)
    bootstrap name, image, flavor
    save name, savename
  end

  def service
    @@service ||= Nephele.new(:service => :default)
  end
end

Nephele::Runner.dispatch
